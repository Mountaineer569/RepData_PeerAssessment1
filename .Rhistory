pt(0.975,df=8, lower.tail=FALSE)
qt(0.975,df=8, lower.tail=FALSE)
qt(0.975,df=8, lower.tail=TRUE)
path <- ("C:/Users/Robert/Documents/Coursera/R/Reproducible/Assessment2")
storm <- readRDS((paste(path, "storm.rds", sep = "/"))
storm <- readRDS((paste(path, "storm.rds", sep = "/")))
storm <- readRDS(/storm.rds)
storm <- readRDS(./storm.rds)
storm <- readRDS(.storm.rds)
storm <- readRDS(storm.rds)
storm <- readRDS((paste(path, "storm.rds", sep = "/")))
zephyr <- storm[sample(nrow(storm),50000),]
saveRDS(zephyr, paste(path, "zephyr.rds", sep="/"))
sessionInfo()
library(data.table)
install.packages("data.table")
library(data.table)
storm[249453,]
storm[249454,]
storm[249452,]
storm2 <- fread(bzfile(paste(path, "repdata_data_StormData.csv.bz2", sep = "/"))
,sep=",")
storm2 <- fread(paste(path, "repdata_data_StormData.csv.bz2", sep = "/"),sep=",")
storm2 <- fread("C:/Users/Robert/Documents/Coursera/R/Reproducible/Assessment2/repdata_data_StormData.csv.bz2",sep=",")
storm2 <- fread("C:/Users/Robert/Documents/Coursera/R/Reproducible/Assessment2/repdata_data_StormData.csv",sep=",")
install.packages("data.table")
install.packages("data.table")
q()
library(data.table)
storm2 <- fread("C:/Users/Robert/Documents/Coursera/R/Reproducible/Assessment2/repdata_data_StormData.csv",header=TRUE)
?results
?knitr
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
## The easiest way to get the residuals
e <- resid(fit)
e
yhat <- predict(fit)
yhR
YHAT
yhat
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
?ststder
?stderr
sd(e)
fit <- lm(y ~ x)
fit
summary(fit)
library(datasets)
str(mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)
?deviance
?mtcars
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
?predict
predict(fit, data.frame(wt=mean(mtcars$wt)))
confint(fit)
confint(fit, wt)
confint(fit, "wt")
newdata <- data.frame(mean(mtcars$wt))
Variable1 <- data.frame(mean(mtcars$wt))
Variable2 <- data.frame(wt=mean(mtcars$wt))
str(Variable1)
str(Variable2)
predict(fit, data.frame(wt=mean(mtcars$wt)))
predict(fit, data.frame(wt=mean(mtcars$wt)), interval = ("confidence"))
confint(fit)
predict(fit, data.frame(wt=3.0), interval = ("confidence"))
predict(fit, data.frame(wt=3.0), interval = ("prediction"))
fit3 <- lm(mpg ~ I(wt/2), data = mtcars)
coef(fit3)
predict(fit3, interval = ("confidence"))
predict(fit3, data.frame(wt=1.0), interval = ("confidence"))
predict(fit3, data.frame(wt=2.0), interval = ("confidence"))
predict(fit3, data.frame(wt=0), interval = ("confidence"))
summary(fit3)
?I
summary(fit)
sm <- summary(lm(mpg ~ wt, data = mtcars))
sm
sse <- sum(sm$residuals^2)
smint <- summary(lm(mpg ~ 1, data = mtcars))
smint
# The sum of squared errors is given by
sseint <- sum(smint$residuals^2)
sse/sseint
install.packages("plyr")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
sessioninfo()
?sessionInfo
sessionInfo
library(help="datasets")
install.packages(datasets)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
?hatvalues
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit35 <- lm(y ~ x)
inflm.35 <- influence.measures(fit35)
summary(inflm.35)
inflm.35
plot(rstudent(fit35) ~ hatvalues(fit35))
fit33 <- lm(mpg ~ factor(cyl) * wt, data=mtcars)
coef(fit33)
summary(fit33)
?mtcars
?datasets
update.datasets("datasets")
install.packages("datasets")
install.packages("datasets")
path <- ("C:/Users/Robert/Documents/Coursera/R/Reproducible/Assessment2")
zephyr <- readRDS((paste(path, "zephyr.rds", sep = "/")))
str(zephyr)
dim(zephyr)
summary(zephyr)
?lm()
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
summary(fit)
data(mtcars)
fit3 <- lm(mpg ~ weight)
summary(fit3)
fit3 <- lm(mpg ~ weight, data=mtcars)
summary(fit3)
summary(mtcars)
fit3 <- lm(mpg ~ wt, data=mtcars)
summary(fit3)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sm <- summary(lm(x~x))
# The sum of squared errors is given by
sse <- sum(sm$residuals^2)
sse
sm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit1 <- lm(y ~ x)
summary(fit1)
?mean()
?stddev
?var
q6 <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(q6)
sd(q6)
q6answer <- (8.58 - mean(q6)) / sd(q6)
q6anwer
q6answer
?cov
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sd(x)
sd(y)
cov(x,y)
betahat1 <- (cov(x,y) * sd(x)) / sd(y)
betahat1
betahat1 <- (cov(x,y) * sd(y)) / sd(x)
betahat1
betahat1 <- (cov(y,x) * sd(y)) / sd(x)
betahat1
cor(x,y)
betahat1 <- (cor(y,x) * sd(y)) / sd(x)
betahat1
fit1 <- lm(y ~ 0 + x)
summary(fit1)
x1 <- c(0.18, -1.54, 0.42, 0.95)
w1 <- c(2, 1, 3, 1)
fitq1 <- lm(w1 ~ x1)
summary(fitq1)
?lm()
?weighted.mean
weighted.mean(x1,w1)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
plot myPlot
plot(myPlot)
?"manipulate"
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, x.s = slider(0, 2, step = 0.1))
?abline
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
?devtools
??devtools
"devtools" %in% rownames(installed.packages())
install.packages("devtools")
devtools::install_github("ramnathv/rCharts@dev")
devtools::install_github("ramnathv/rCharts@dev")
install.packages("base64enc")
devtools::install_github("ramnathv/rCharts@dev")
head(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
devtools::install_github('rstudio/shinyapps')
install.packages("rstudioapi")
"rstudioapi" %in% rownames(installed.packages())
?rstudioapi
??rstudioapi
version
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='rcarman569', token='F46FB9C0D50518A1ADD10E4DA5DDE2C4', secret='L1CCg8y9IRtwD5JLpmQIO7wEsYJXOpGBsEIF600/')
library(shinyapps)
?"shinyapps"
?shinyUI
library(shiny)
install.packages("shiny")
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
install.packages("UsingR")
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05)
),
mainPanel(
plotOutput('newHist')
)
))
?shiny
"shinyapps-package"
?"shinyapps-package"
install.packages("shinyapps")
dir
dirname
dir()
?dir
?chdir
?cd
setwd("C:/Users/Robert/Documents/Coursera/R/Reproducible/Project1c/RepData_PeerAssessment1")
list.files
list.files()
?hist
?axis
?labels
?big.mark
?formatC
library(plyr)
### Loading and preprocessing the data.
path <- "C:/Users/Robert/Documents/Coursera/R/Reproducible"
# 1. Load the data.
activity <- read.csv(paste(path,"repdata_data_activity/activity.csv",sep = "/"),
header=TRUE, sep=",", stringsAsFactor=FALSE, na.strings="NA")
# 2. Format Date and Time fields.
activity$date <- strptime(activity$date, format = "%Y-%m-%d")
# Summarize the data to see what it contains.
summary(activity)
daystats <- ddply(activity, .(date), summarize,
daysum = sum(steps, na.rm = TRUE),
daymean = round(mean(steps, na.rm = TRUE),1),
daymedian = round(median(steps, na.rm = TRUE),1))
# Show a sampling of the total number of steps taken per day, variable "daysum".
head(daystats)
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, labels=prettyNum(format="d", big.mark=",")
)
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, labels=prettyNum(daystats$daysum, format="d", big.mark=",")
)
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, axis(side=1, at=axTicks(1), labels=formatC(axTicks(1), format="d", big.mark=','))
)
?axis
?axTicks
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, axis(2, daystats$daysum, labels = prettyNum(daystats$daysum, big.mark = ","))
)
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, axis(1, daystats$daysum, labels = prettyNum(daystats$daysum, big.mark = ","))
)
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, axis(3, daystats$daysum, labels = prettyNum(daystats$daysum, big.mark = ","))
)
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
)
?axis
paste("Mean steps taken per day = ", round(mean(daystats$daysum, na.rm=TRUE),2))
paste("Median steps taken per day = ", median(daystats$daysum, na.rm=TRUE))
intstats <- ddply(activity, .(interval), summarize,
intsum = sum(steps, na.rm = TRUE),
intmean = round(mean(steps, na.rm = TRUE),1))
plot.ts(intstats$interval, intstats$intmean
,type="l"
,xlab="5 minute interval"
,ylab="average steps taken"
,main="Average Steps Taken per Interval")
plot.ts(intstats$interval, intstats$intmean
,type="l"
,xlab="5 minute interval"
,ylab="average steps taken"
,main="Average Steps Taken per Interval"
,axis(1, intstats$interval, labels = prettyNum(intstats$interval, big.mark = ","))
)
plot.ts(intstats$interval, intstats$intmean
,type="l"
,xlab="5 minute interval"
,ylab="average steps taken"
,main="Average Steps Taken per Interval"
, axis(side=1, at=axTicks(1), labels=formatC(axTicks(1), format="d", big.mark=',')))
?axis
?axTicks()
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, axis(side=1, at=axTicks(1), labels=formatC(axTicks(1), format="d", big.mark=',')))
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, axis(side=2, at=axTicks(2), labels=formatC(axTicks(2), format="d", big.mark=',')))
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, xaxt="n")
axis(side=2, at=axTicks(2), labels=formatC(axTicks(2), format="d", big.mark=','))
hist(daystats$daysum
, breaks = 10
, main="Steps Taken Per Day"
, xlab="Steps"
, ylab="Frequency"
, col="blue"
, xaxt="n")
axis(side=1, at=axTicks(1), labels=formatC(axTicks(1), format="d", big.mark=','))
plot.ts(intstats$interval, intstats$intmean
,type="l"
,xlab="5 minute interval"
,ylab="average steps taken"
,main="Average Steps Taken per Interval"
,xaxt="n")
axis(side=1, at=axTicks(1), labels=formatC(axTicks(1), format="d", big.mark=','))
?format
paste("Median steps taken per day = ", format(median(daystats$daysum, na.rm=TRUE)),big.mark=",")
paste("Median steps taken per day = ", prettyNum(median(daystats$daysum, na.rm=TRUE)),big.mark=",")
paste("Median steps taken per day = ", prettyNum(median(daystats$daysum, na.rm=TRUE)),format="d",big.mark=",")
paste("Median steps taken per day = ", (prettyNum(median(daystats$daysum, na.rm=TRUE)),format="d",big.mark=","))
paste("Median steps taken per day = ", median(daystats$daysum, na.rm=TRUE)))
paste("Median steps taken per day = ", median(daystats$daysum, na.rm=TRUE))
maxsteps <- which(intstats$intmean == max(intstats$intmean))
intstats[maxsteps,]
### Imputing missing values
# 1. Calculate and report the total number of missing values in the dataset.
paste(sum(is.na(activity$steps)),"missing values for variable steps.")
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
activitynona <- merge(activity, intstats, by = "interval")
# 2. Fill in missing values with daily average
activitynona$steps[is.na(activitynona$steps)] <-
activitynona$intmean[is.na(activitynona$steps)]
# Calculate statistics of steps taken per day, imputed values, for later use.
daystatsnona <- ddply(activitynona, .(date), summarize,
daysum = sum(steps, na.rm = TRUE),
daymean = round(mean(steps, na.rm = TRUE),1),
daymedian = round(median(steps, na.rm = TRUE),1))
head(daystatsnona)
hist(daystatsnona$daysum
, breaks = 10
, main="Steps Taken Per Day with NAs Imputed"
, xlab="Steps per Day"
, ylab="Frequency"
, col="blue"
)
hist(daystatsnona$daysum
, breaks = 10
, main="Steps Taken Per Day with NAs Imputed"
, xlab="Steps per Day"
, ylab="Frequency"
, col="blue"
, xaxt="n")
axis(side=1, at=axTicks(1), labels=formatC(axTicks(1), format="d", big.mark=',')) #add commas to x-axis
paste("Mean steps taken per day = ", round(mean(daystatsnona$daysum),2))
paste("Median steps taken per day = ", median(daystatsnona$daysum))
# 4c. Do these values differ from the estimates from the first part of the assignment?
identical(daystats, daystatsnona)
paste("The imputed data set is not identical (FALSE) to the original.")
# 4d. What is the impact of imputing missing data on the estimates of the total daily number of steps?
paste("Imputing values increased(decreased) the average daily steps by ",
round(mean(daystats$daysum),2) - round(mean(daystatsnona$daysum),2))
hist(daystatsnona$daysum
, breaks = 10
, main="Steps Taken Per Day with NAs Imputed"
, xlab="Steps per Day"
, ylab="Frequency"
, col="blue"
, xaxt="n")
# add commas to x-axis
axis(side=1, at=axTicks(1), labels=formatC(axTicks(1), format="d", big.mark=','))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary (fit)
library(datasets)
str(mtcars)
fit3 <- lm(mpg ~ wt, data = mtcars)
summary(fit3)
predict(fit3, data.frame(wt=mean(mtcars$wt)), interval = ("confidence"))
predict(fit3, data.frame(wt=3.0), interval = ("prediction"))
sm <- summary(lm(mpg ~ wt, data = mtcars))
sm
# The sum of squared errors is given by
sse <- sum(sm$residuals^2)
## Intercept only (no slope) model
smint <- summary(lm(mpg ~ 1, data = mtcars))
smint
# The sum of squared errors is given by
sseint <- sum(smint$residuals^2)
# ratio
sse/sseint
fit3 <- lm(mpg ~ I(wt/2), data = mtcars)
coef(fit3)
summary(fit3)
predict(fit3, data.frame(wt=0), interval = ("confidence"))
fit3 <- lm(mpg ~ I(wt/2), data = mtcars)
coef(fit3)
summary(fit3)
predict(fit3, data.frame(wt=0), interval = ("confidence"))
